openapi: 3.0.0
info:
  title: Pokemon Battle API
  description: A complete Pokemon game API with battles, trades, and trainer management
  version: 1.0.0

servers:
  - url: https://wynrikrqhifuvwgbcncs.supabase.co/functions/v1
    description: Supabase Edge Functions
paths:
  /auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user using their username and password.
      requestBody:
        description: Username and password of the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user.
                  example: "trainer123"
                password:
                  type: string
                  description: The password of the user.
                  example: "mypassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_token:
                    type: string
                    description: The session token for the logged-in user.
                    example: "abcd1234-5678-90ef-ghij-klmnoprstuvw"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Invalid username or password"
        '400':
          description: Server or database error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
                    example: "Database query error"

  /oak/help:
    get:
      summary: Get help message
      description: Provides an introduction to the Pokémon world and guides trainers on their journey.
      responses:
        '200':
          description: Help message with an introduction and guidance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Welcome and guidance message from Professor Oak.
                    example: "Welcome to the world of Pokémon! I'm Professor Oak..."
  /oak/get-starter:
    get:
      summary: Get starter Pokémon
      description: Assigns a starter Pokémon to a new trainer if they don’t already have one.
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Bearer token for trainer session.
      responses:
        '200':
          description: Starter Pokémon assigned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    example: "Congratulations! You received Bulbasaur as your starter Pokémon!"
                  team:
                    type: array
                    items:
                      type: object
                      description: Details of the trainer's team Pokémon.
                      properties:
                        id:
                          type: string
                          description: Pokémon ID.
                        name:
                          type: string
                          description: Pokémon name.
        '400':
          description: Error assigning a starter Pokémon.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "You already have Pokémon! A starter can only be given to new trainers."
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Unauthorized"
  /oak/pokedex:
    get:
      summary: View trainer's Pokédex
      description: Fetches the Pokédex for a trainer, listing Pokémon and their statuses.
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Bearer token for trainer session.
      responses:
        '200':
          description: Pokédex retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    pokemon:
                      type: object
                      description: Pokémon details.
                      properties:
                        id:
                          type: string
                          description: Pokémon ID.
                        name:
                          type: string
                          description: Pokémon name.
                    status:
                      type: string
                      description: Pokémon's status in the Pokédex.
                      example: "CAUGHT"
        '400':
          description: Error retrieving the Pokédex.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Database query error"
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Unauthorized"

  /shop/list:
    get:
      summary: List shop items
      description: Retrieves a list of items available in the shop.
      responses:
        '200':
          description: List of shop items.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Item ID.
                    name:
                      type: string
                      description: Item name.
                    price:
                      type: number
                      description: Price of the item.
                    current_stock:
                      type: integer
                      description: Current stock available.
                      example: 10
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Database query error"
  /shop/buy:
    post:
      summary: Buy an item from the shop
      description: Allows a trainer to purchase an item if they have enough money and the item is in stock.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  description: The ID of the item to purchase.
      responses:
        '200':
          description: Purchase successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    example: "Successfully purchased Potion!"
                  remainingMoney:
                    type: number
                    description: Trainer's remaining money after purchase.
                    example: 500
                  remainingStock:
                    type: integer
                    description: Remaining stock of the purchased item.
                    example: 9
        '400':
          description: Bad request, e.g., insufficient funds or item out of stock.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Not enough money to buy this item"
        '404':
          description: Item not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Item not found in shop"
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Unauthorized"

  /trainers:
    get:
      summary: Get all trainers
      description: Retrieves a list of all trainers.
      responses:
        '200':
          description: List of trainers.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Trainer ID.
                    name:
                      type: string
                      description: Trainer name.
                    money:
                      type: number
                      description: Trainer's available money.
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch trainers."
  /trainers/{id}:
    get:
      summary: Get a trainer by ID
      description: Retrieves details of a specific trainer by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Trainer ID.
      responses:
        '200':
          description: Trainer details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  money:
                    type: number
        '404':
          description: Trainer not found.
        '500':
          description: Server error.
  

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT