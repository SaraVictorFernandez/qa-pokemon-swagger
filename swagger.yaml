openapi: 3.0.0
info:
  title: Pokemon Battle API
  description: A complete Pokemon game API with battles, trades, and trainer management
  version: 1.0.0

servers:
  - url: https://wynrikrqhifuvwgbcncs.supabase.co/functions/v1
    description: Supabase Edge Functions
paths:
  /auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user using their username and password.
      requestBody:
        description: Username and password of the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user.
                  example: "trainer123"
                password:
                  type: string
                  description: The password of the user.
                  example: "mypassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_token:
                    type: string
                    description: The session token for the logged-in user.
                    example: "abcd1234-5678-90ef-ghij-klmnoprstuvw"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Invalid username or password"
        '400':
          description: Server or database error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
                    example: "Database query error"

  /auth/register:
    post:
      summary: Register a new trainer
      description: Creates a new trainer account with the provided username and password.
      requestBody:
        description: New trainer registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The desired username for the new trainer
                  example: "trainer123"
                password:
                  type: string
                  description: The password for the new trainer (will be hashed with SHA-256)
                  example: "mypassword"
              required:
                - username
                - password
      responses:
        '201':
          description: Trainer successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the newly created trainer
                  username:
                    type: string
                    description: The trainer's username
                  created_at:
                    type: string
                    format: date-time
                    description: Timestamp of account creation
                  team_count:
                    type: integer
                    description: Number of Pokémon in trainer's team (starts at 0)
                  last_activity:
                    type: string
                    format: date-time
                    description: Timestamp of last activity
                  session_token:
                    type: string
                    description: Initial session token (null for new accounts)
                    nullable: true
        '400':
          description: Database error or invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: "Database query error"

  /oak/help:
    get:
      summary: Get help message
      description: Provides an introduction to the Pokémon world and guides trainers on their journey.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Help message with an introduction and guidance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Welcome and guidance message from Professor Oak.
                    example: "Welcome to the world of Pokémon! I'm Professor Oak..."
  /oak/get-starter:
    get:
      summary: Get starter Pokémon
      description: Assigns a starter Pokémon to a new trainer if they don’t already have one.
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Bearer token for trainer session.
      responses:
        '200':
          description: Starter Pokémon assigned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    example: "Congratulations! You received Bulbasaur as your starter Pokémon!"
                  team:
                    type: array
                    items:
                      type: object
                      description: Details of the trainer's team Pokémon.
                      properties:
                        id:
                          type: string
                          description: Pokémon ID.
                        name:
                          type: string
                          description: Pokémon name.
        '400':
          description: Error assigning a starter Pokémon.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "You already have Pokémon! A starter can only be given to new trainers."
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Unauthorized"
  /oak/pokedex:
    get:
      summary: View trainer's Pokédex
      description: Fetches the Pokédex for a trainer, listing Pokémon and their statuses.
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Bearer token for trainer session.
      responses:
        '200':
          description: Pokédex retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    pokemon:
                      type: object
                      description: Pokémon details.
                      properties:
                        id:
                          type: string
                          description: Pokémon ID.
                        name:
                          type: string
                          description: Pokémon name.
                    status:
                      type: string
                      description: Pokémon's status in the Pokédex.
                      example: "CAUGHT"
        '400':
          description: Error retrieving the Pokédex.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Database query error"
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Unauthorized"

  /shop/list:
    get:
      summary: List shop items
      description: Retrieves a list of items available in the shop.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of shop items.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Item ID.
                    name:
                      type: string
                      description: Item name.
                    price:
                      type: number
                      description: Price of the item.
                    current_stock:
                      type: integer
                      description: Current stock available.
                      example: 10
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Database query error"
  /shop/buy:
    post:
      summary: Buy an item from the shop
      description: Allows a trainer to purchase an item if they have enough money and the item is in stock.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  description: The ID of the item to purchase.
      responses:
        '200':
          description: Purchase successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                    example: "Successfully purchased Potion!"
                  remainingMoney:
                    type: number
                    description: Trainer's remaining money after purchase.
                    example: 500
                  remainingStock:
                    type: integer
                    description: Remaining stock of the purchased item.
                    example: 9
        '400':
          description: Bad request, e.g., insufficient funds or item out of stock.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Not enough money to buy this item"
        '404':
          description: Item not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Item not found in shop"
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Unauthorized"

  /trainers:
    get:
      summary: Get all trainers
      description: Retrieves a list of all trainers.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of trainers.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Trainer ID.
                    name:
                      type: string
                      description: Trainer name.
                    money:
                      type: number
                      description: Trainer's available money.
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch trainers."
  /trainers/{id}:
    get:
      summary: Get a trainer by ID
      description: Retrieves details of a specific trainer by their ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Trainer ID.
      responses:
        '200':
          description: Trainer details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  money:
                    type: number
        '404':
          description: Trainer not found.
        '500':
          description: Server error.
  /trainers/me:
    get:
      summary: Get current trainer
      description: Retrieves details of the trainer associated with the provided session token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Trainer details.
        '401':
          description: Unauthorized access.
        '404':
          description: Trainer not found.
  /trainers/{id}/team:
    get:
      summary: Get trainer's team
      description: Retrieves the Pokémon team of a specific trainer by their ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Trainer ID.
      responses:
        '200':
          description: List of Pokémon in the trainer's team.
        '404':
          description: Trainer or team not found.
        '500':
          description: Server error.
  /trainers/me/team:
    get:
      summary: Get current trainer's team
      description: Retrieves the Pokémon team of the trainer associated with the session token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Pokémon in the trainer's team.
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /trainers/{id}/attack:
    post:
      summary: Attack another trainer
      description: Initiates an attack on another trainer's team.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Target trainer ID.
      responses:
        '200':
          description: Attack results.
        '400':
          description: Invalid request, e.g., attacking oneself or a trainer with no team.
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /trainers/me/accepts-pvp:
    post:
      summary: Update current trainer's PvP acceptance status
      description: Updates whether the current trainer is accepting PvP battle challenges.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acceptsPvP:
                  type: boolean
                  description: Whether to accept PvP battles
              required:
                - acceptsPvP
              example:
                acceptsPvP: false
      responses:
        '200':
          description: PvP acceptance status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  acceptsPvP:
                    type: boolean
                    description: Current PvP acceptance status
                example:
                  "message": "PvP setting changed."
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /trainers/me/items:
    get:
      summary: Get current trainer's items
      description: Retrieves the items owned by the current trainer.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of items.
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /trainers/me/items/{id}/use:
    post:
      summary: Use an item
      description: Uses an item on a Pokémon.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pokemonId:
                  type: string
                  description: ID of the Pokémon to use the item on.
      responses:
        '200':
          description: Item used successfully.
        '400':
          description: Invalid request, e.g., item not found or invalid Pokémon ID.
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /trainers/me/achievements:
    get:
      summary: Get current trainer's accomplishments
      description: Retrieves the accomplishments of the current trainer.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accomplishments.
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /trainers/{id}/achievements:
    get:
      summary: Get a trainer's accomplishments
      description: Retrieves the accomplishments of a specific trainer by their ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Trainer ID.
      responses:
        '200':
          description: List of accomplishments.
        '404':
          description: Trainer not found.
        '500':
          description: Server error.

  /wilderness/walk-grass:
    post:
      summary: Walk in the grass to discover wild Pokémon
      description: Simulates walking in grass, with a chance to encounter a wild Pokémon.
      security:
        - bearerAuth: []
      requestBody:
        description: Type of grass being walked through.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [short, tall]
                  description: Type of grass, influencing the probability of encountering a Pokémon.
              example:
                type: "tall"
      responses:
        '200':
          description: Encountered Pokémon details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Pokémon ID.
                  name:
                    type: string
                    description: Pokémon name.
                  level:
                    type: integer
                    description: Pokémon level.
                  status:
                    type: string
                    description: Encounter status (e.g., wild).
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized."
        '400':
          description: Bad request.
  /wilderness/pokemon/{id}/engage-combat:
    post:
      summary: Attack a wild Pokémon
      description: Engage in combat with a specific wild Pokémon.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the Pokémon to engage in combat with.
      responses:
        '200':
          description: Combat result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: Outcome of the combat.
                  trainerHealth:
                    type: integer
                    description: Trainer's Pokémon health after combat.
                  wildPokemonHealth:
                    type: integer
                    description: Wild Pokémon health after combat.
        '401':
          description: Unauthorized access.
        '404':
          description: Pokémon not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pokémon not found."
        '500':
          description: Server error.

  /cities:
    get:
      summary: List all cities
      description: Fetches a list of all available cities.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of cities.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message.
                  cities:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Unique identifier for the city.
                        name:
                          type: string
                          description: Name of the city.
                        description:
                          type: string
                          description: The description for the city.
                      example:
                        id: "123"
                        name: "Pallet Town"
                        description: "A nice town"
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /cities/{id}:
    get:
      summary: Get details of a specific city
      description: Fetches detailed information about a specific city by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier for the city.
      responses:
        '200':
          description: City details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  city:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Unique identifier for the city.
                      name:
                        type: string
                        description: Name of the city.
                      description:
                        type: string
                        description: Brief description of the city.
                    example:
                      id: "123"
                      name: "Pallet Town"
                      description: "A small town with a famous Pokémon laboratory."
        '401':
          description: Unauthorized access.
        '404':
          description: City not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "City not found."
        '500':
          description: Server error.

  /box/transfer:
    post:
      summary: Transfer Pokémon between box and team
      description: Transfers a Pokémon between the trainer's box and team. A trainer can have a maximum of 6 Pokémon in their team and must have at least one Pokémon in the team at all times.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pokemonId:
                  type: string
                  description: ID of the Pokémon to transfer.
              required:
                - pokemonId
              example:
                pokemonId: "12345"
      responses:
        '200':
          description: Pokémon transfer successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Transfer status message.
                  newTeam:
                    type: array
                    description: Updated team after transfer.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Pokémon ID.
                        name:
                          type: string
                          description: Pokémon name.
                        level:
                          type: integer
                          description: Pokémon level.
                      example:
                        id: "12345"
                        name: "Pikachu"
                        level: 12
        '400':
          description: Transfer failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: "You need to have at least 1 Pokémon in your team."
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.
  /box:
    get:
      summary: List all Pokémon in the box
      description: Retrieves a list of all Pokémon currently in the trainer's box.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Pokémon in the box.
          content:
            application/json:
              schema:
                type: object
                properties:
                  box:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Pokémon ID.
                        name:
                          type: string
                          description: Pokémon name.
                        level:
                          type: integer
                          description: Pokémon level.
                      example:
                        id: "12345"
                        name: "Bulbasaur"
                        level: 8
        '401':
          description: Unauthorized access.
        '500':
          description: Server error.

  /trades/propose:
    post:
      summary: Propose a Pokémon trade
      description: Allows a trainer to propose a trade by offering one of their Pokémon in exchange for another trainer's Pokémon.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offerPokemonId:
                  type: string
                  description: ID of the Pokémon the trainer is offering.
                askingPokemonId:
                  type: string
                  description: ID of the Pokémon the trainer wants.
              required:
                - offerPokemonId
                - askingPokemonId
              example:
                offerPokemonId: "12345"
                askingPokemonId: "67890"
      responses:
        '200':
          description: Trade proposal created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tradeId:
                    type: string
                    description: ID of the created trade.
                  status:
                    type: string
                    description: Trade status.
                  offerPokemonId:
                    type: string
                    description: ID of the offered Pokémon.
                  askingPokemonId:
                    type: string
                    description: ID of the requested Pokémon.
                example:
                  tradeId: "112233"
                  status: "PENDING"
                  offerPokemonId: "12345"
                  askingPokemonId: "67890"
        '400':
          description: Bad request or validation error.
        '401':
          description: Unauthorized access.
  /trades/{id}/accept:
    post:
      summary: Accept a Pokémon trade
      description: Allows the trainer receiving the trade to accept it, completing the trade process.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the trade to accept.
          schema:
            type: string
      responses:
        '200':
          description: Trade accepted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tradeId:
                    type: string
                    description: ID of the trade.
                  status:
                    type: string
                    description: Updated trade status.
                example:
                  tradeId: "112233"
                  status: "COMPLETED"
        '400':
          description: Invalid trade or insufficient permissions.
        '401':
          description: Unauthorized access.
        '404':
          description: Trade not found.
  /trades/{id}/reject:
    post:
      summary: Reject a Pokémon trade
      description: Allows a trainer to reject a trade, canceling it.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the trade to reject.
          schema:
            type: string
      responses:
        '200':
          description: Trade rejected successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
                example:
                  message: "Trade rejected"
        '400':
          description: Invalid trade or insufficient permissions.
        '401':
          description: Unauthorized access.
        '404':
          description: Trade not found.
  /trades:
    get:
      summary: List trades
      description: Retrieves all trades involving the current trainer, optionally filtering by trade status.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          description: Filter trades by status (e.g., PENDING, COMPLETED, REJECTED).
          schema:
            type: string
      responses:
        '200':
          description: List of trades.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tradeId:
                      type: string
                      description: ID of the trade.
                    status:
                      type: string
                      description: Trade status.
                    offerPokemonId:
                      type: string
                      description: ID of the offered Pokémon.
                    askingPokemonId:
                      type: string
                      description: ID of the requested Pokémon.
                  example:
                    tradeId: "112233"
                    status: "PENDING"
                    offerPokemonId: "12345"
                    askingPokemonId: "67890"
        '401':
          description: Unauthorized access.

  /combats:
    get:
      summary: List all combats for a trainer
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter combats by status
          required: false
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - FINISHED
      responses:
        '200':
          description: A list of combats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Combat'
        '400':
          description: Invalid request

  /combats/{id}:
    get:
      summary: Get details of a specific combat
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Combat ID
          schema:
            type: string
      responses:
        '200':
          description: Combat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combat'
        '404':
          description: Combat not found

  /combats/{id}/attack:
    post:
      summary: Attack in a combat
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Combat ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                attackType:
                  type: string
                  enum:
                    - rock
                    - paper
                    - scissors
              required:
                - attackType
      responses:
        '200':
          description: Attack successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatActionResponse'
        '400':
          description: Invalid attack action

  /combats/{id}/item:
    post:
      summary: Use an item in a combat
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Combat ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
              required:
                - itemId
      responses:
        '200':
          description: Item used successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatActionResponse'
        '400':
          description: Invalid item action

  /combats/{id}/flee:
    post:
      summary: Flee from a combat
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Combat ID
          schema:
            type: string
      responses:
        '200':
          description: Successfully fled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatActionResponse'
        '400':
          description: Cannot flee from this combat

  /combats/{id}/switch:
    post:
      summary: Switch active Pokémon in combat
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Combat ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pokemonId:
                  type: string
                  description: ID of the Pokémon to switch to
              required:
                - pokemonId
      responses:
        '200':
          description: Pokémon switched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatActionResponse'
        '400':
          description: Invalid switch action or not in combat

  /combats/{id}/wait:
    post:
      summary: Skip turn in combat
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Combat ID
          schema:
            type: string
      responses:
        '200':
          description: Turn skipped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatActionResponse'
        '400':
          description: Invalid wait action or not in combat

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT