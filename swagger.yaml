openapi: 3.0.0
info:
  title: Pokemon Trainer API
  description: This is an API for a Pokémon Trainer to interact with their team and Pokédex.
  version: 1.0.0
servers:
  - url: https://wynrikrqhifuvwgbcncs.supabase.co/functions/v1
    description: Supabase Functions Server

paths:
  /register:
    post:
      summary: Register a new trainer
      description: Creates a new trainer with credentials for login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username for the trainer.
                password:
                  type: string
                  description: Password for the trainer.
              required:
                - username
                - password
      responses:
        '201':
          description: Trainer successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the trainer.
                  username:
                    type: string
                    description: Username of the trainer.
                  created_at:
                    type: string
                    format: date-time
                    description: Date and time when the trainer was created.
                  team_count:
                    type: integer
                    description: Number of Pokémon in the trainer's team.
                  last_activity:
                    type: string
                    format: date-time
                    description: Last activity time for the trainer.
                  session_token:
                    type: string
                    nullable: true
                    description: Session token for the trainer.
  /login:
    post:
      summary: Login as a trainer
      description: Logs in a trainer with credentials and generates a session token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username for the trainer.
                password:
                  type: string
                  description: Password for the trainer.
              required:
                - username
                - password
      responses:
        '200':
          description: Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_token:
                    type: string
                    description: Session token to be used for authenticated requests.
        '401':
          description: Unauthorized. Invalid username or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the login failed.
        '400':
          description: Bad request. This could be due to invalid input or a database error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating what went wrong.
  /trainers:
    get:
      summary: Get all trainers
      description: Retrieve a list of all Pokémon trainers with their basic info.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of all trainers.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique identifier for the trainer.
                    username:
                      type: string
                      description: Username of the trainer.
                    created_at:
                      type: string
                      format: date-time
                      description: Date and time when the trainer was created.
                    team_count:
                      type: integer
                      description: Number of Pokémon in the trainer's team.
                    last_activity:
                      type: string
                      format: date-time
                      description: Last activity time for the trainer.
                    session_token:
                      type: string
                      nullable: true
                      description: Session token for the trainer.
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /trainers/{id}:
    get:
      summary: Get a specific trainer
      description: Retrieve information about a specific Pokémon trainer.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the trainer.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Trainer details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the trainer.
                  username:
                    type: string
                    description: Username of the trainer.
                  created_at:
                    type: string
                    format: date-time
                    description: Date and time when the trainer was created.
                  team_count:
                    type: integer
                    description: Number of Pokémon in the trainer's team.
                  last_activity:
                    type: string
                    format: date-time
                    description: Last activity time for the trainer.
                  session_token:
                    type: string
                    nullable: true
                    description: Session token for the trainer.
        '401':
          description: Unauthorized
        '404':
          description: Trainer not found
        '500':
          description: Internal Server Error

  /trainers/{id}/team:
    get:
      summary: Get a trainer's Pokémon team
      description: Retrieve the list of Pokémon in a trainer's team. It has a maximum capacity of 6 pokemons.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the trainer.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: The Pokémon team for the trainer.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique identifier for the Pokémon.
                    name:
                      type: string
                      description: Name of the Pokémon.
                    level:
                      type: integer
                      description: Level of the Pokémon.
                    trainer_id:
                      type: string
                      description: ID of the trainer that owns the Pokémon.
                    status:
                      type: string
                      description: Status of the Pokémon (e.g., TEAM, FREE, WILD).
        '401':
          description: Unauthorized
        '404':
          description: Team not found
        '500':
          description: Internal Server Error
  /walk_grass:
    post:
      summary: Walk in the grass to encounter a new Pokémon
      description: Walk in either tall or low grass to encounter a random Pokémon. The level of the encountered Pokémon will depend on the type of grass (low grass produces pokemons between levels 1 and 30, tall grass produces pokemons between levels 31 and 50).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grass_type:
                  type: string
                  description: Type of grass in which the trainer is walking (e.g., "tall" or "low").
                  enum: [tall, low]
              required:
                - grass_type
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully encountered a Pokémon.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the encountered Pokémon.
                  name:
                    type: string
                    description: Name of the encountered Pokémon.
                  trainer_id:
                    type: string
                    description: Trainer ID of the trainer who encountered the Pokémon.
                  caught_at:
                    type: string
                    format: date-time
                    description: Date and time when the Pokémon was encountered.
                  level:
                    type: integer
                    description: Level of the encountered Pokémon.
        '401':
          description: Unauthorized. The request must include a valid session token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the request was unauthorized.
        '400':
          description: Bad request. This could be due to a failure to fetch Pokémon data from the PokeAPI or an invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating what went wrong.
  /capture:
    post:
      summary: Capture an encountered Pokémon
      description: Capture a Pokémon that was recently encountered by the trainer. The capture has a success probability of 50%.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pokemon_id:
                  type: string
                  description: The ID of the Pokémon to capture.
              required:
                - pokemon_id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully captured Pokémon.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the Pokémon.
                  name:
                    type: string
                    description: Name of the Pokémon.
                  trainer_id:
                    type: string
                    description: Unique identifier of the trainer who captured the Pokémon.
                  caught_at:
                    type: string
                    format: date-time
                    description: Date and time when the Pokémon was captured.
                  gained_exp:
                    type: integer
                    description: Experience points gained by the Pokémon.
                  level:
                    type: number
                    description: Level of the captured Pokémon (calculated from gained experience).
        '401':
          description: Unauthorized. The request must include a valid session token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the request was unauthorized.
        '400':
          description: Bad request. This could be due to an invalid Pokémon ID, a failed capture attempt, or the Pokémon being unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating what went wrong.
  /free:
    post:
      summary: Free a captured Pokémon
      description: Release a Pokémon from the trainer's team.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pokemon_id:
                  type: string
                  description: The ID of the Pokémon to release.
              required:
                - pokemon_id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully freed Pokémon.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating that the Pokémon was successfully freed.
                  pokemon:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Unique identifier for the freed Pokémon.
                      name:
                        type: string
                        description: Name of the Pokémon that was freed.
        '401':
          description: Unauthorized. The request must include a valid session token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the request was unauthorized.
        '400':
          description: Bad request. This could be due to an invalid Pokémon ID or if the Pokémon does not belong to the trainer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating what went wrong.
  /attack:
    post:
      summary: Attack a Pokémon
      description: Allows a trainer to attack a target Pokémon using one of their own Pokémon (the ones they have on their team). The level difference influences on the winning probability (with a minimum probability of 10% of winning for either side).
        After winning after an attack, the pokemon will receive experience points.
        If the attacker loses, the pokemon will be dizzy for 5 seconds and won't be able to do any attacks during that time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                attacking_pokemon_id:
                  type: string
                  description: The ID of the Pokémon attacking.
                target_pokemon_id:
                  type: string
                  description: The ID of the target Pokémon being attacked.
              required:
                - attacking_pokemon_id
                - target_pokemon_id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Attack outcome.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the outcome of the attack (e.g., "Attack successful" or "Attack failed, Pokémon is dizzy").
                  pokemon:
                    type: object
                    description: Details of the attacking Pokémon after the attack.
                    properties:
                      id:
                        type: string
                        description: Unique identifier for the Pokémon.
                      name:
                        type: string
                        description: Name of the Pokémon.
                      last_defeat:
                        type: string
                        format: date-time
                        nullable: true
                        description: The last time the Pokémon was defeated (if applicable).
        '401':
          description: Unauthorized. The request must include a valid session token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the request was unauthorized.
        '400':
          description: Bad request. This could be due to invalid Pokémon IDs, unauthorized ownership of the attacking Pokémon, or if either Pokémon is currently dizzy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating what went wrong.
  /pokedex:
    get:
      summary: Get the trainer's Pokédex
      description: Retrieve the trainer's Pokédex, including information about captured, freed, and seen Pokémon.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of Pokémon in the trainer's Pokédex.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    card:
                      type: string
                      description: URL for the Pokémon information.
                    status:
                      type: string
                      description: The status of the Pokémon.
                      enum: [ON_YOUR_TEAM, FREED, SEEN]
        '401':
          description: Unauthorized. Invalid session token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the reason for unauthorized access.
        '500':
          description: Internal Server Error. An error occurred while processing the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
